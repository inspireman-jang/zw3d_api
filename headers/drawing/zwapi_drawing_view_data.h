/**
@file zwapi_drawing_view_data.h
@copyright (C) Copyright 2024, ZWSOFT CO., LTD. (Guangzhou) All Rights Reserved.
@note THE HEADER FILE FOR THE ZW3D Generic Data Types and Structures of Drawing View
Second Menu Command functions.
*/

#pragma once
#ifndef ZW_API_DRAWING_VIEW_DATA_H /* this ifndef surrounds entire header */
#define ZW_API_DRAWING_VIEW_DATA_H

#include "zwapi_util.h"
#include "zwapi_matrix_data.h"

#ifdef __cplusplus
extern "C"
{
#endif /* __cplusplus */

    //====================================================================================================================
    /** @name View Create*/
    //====================================================================================================================
    /** 
    @brief type of geometry
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwDrawingGeometryType
    {
        ZW_DRAWING_SHOWN_GEOMETRY_NOT_COORESPONDING_EDGE_AND_FACE = 1,  /**<@brief  shown geometries NOT corresponding to original edges and faces, such as  
                                                                            boundary generated by Broken Section view       */
        ZW_DRAWING_SHOWN_GEOMETRY_COORESPONDING_EDGE_AND_FACE     = 2,  /**<@brief  shown geometries cooresponding to original edges and faces  */
        ZW_DRAWING_HIDDEN_GEOMETRY                                = 3,  /**<@brief  hidden geometry */
        ZW_DRAWING_SHOWN_TANGENT_GEOMETRY                         = 4,  /**<@brief  tangent-shown geometry;   */
        ZW_DRAWING_HIDDEN_TANGENT_GEOMETRY                        = 5,  /**<@brief  tangent-hidden geometry */
        ZW_DRAWING_COSMETIC_THREAD_GEOMETRY                       = 6,  /**<@brief  cosmetic thread geometry */
        ZW_DRAWING_SECTION_VIEW_CUTTING_PLANE_GEOMETRY            = 7,  /**<@brief  section view cutting plane geometry, or for detail view clip boundary    
                                                                             (circle only)  */
        ZW_DRAWING_CENTERLINE_GEOMETRY                            = 8,  /**<@brief  centerline geometry */
        ZW_DRAWING_CENTERLINE_OBJECT                              = 9,  /**<@brief  centerline objects */
        ZW_DRAWING_3D_WIREFRAME_DATA                              = 10, /**<@brief  3D wireframe data */
        ZW_DRAWING_HIDDEN_WIREFRAME_CURVE                         = 11, /**<@brief  "hidden" wireframe curves */
        ZW_DRAWING_HIDDEN_TOP_CENTERMARK                          = 12, /**<@brief  "hidden" top center marks */
        ZW_DRAWING_HIDDEN_CENTERLINE                              = 13, /**<@brief  "hidden" centerlines */
        ZW_DRAWING_HIDDEN_THREAD                                  = 14, /**<@brief  "hidden" threads */
        ZW_DRAWING_3D_POINT_DATA                                  = 15, /**<@brief  3D point data */
        ZW_DRAWING_THICK_LINE                                     = 16, /**<@brief  thick line */
        ZW_DRAWING_3D_ANNOTATION_TEXT                             = 17, /**<@brief  3D annotation text */
        ZW_DRAWING_ARROW                                          = 18, /**<@brief  arrows */
        ZW_DRAWING_SHOWN_BEND_LINE                                = 19, /**<@brief  bend lines of sheet metal */
        ZW_DRAWING_HIDDEN_BEND_LINE                               = 20, /**<@brief  "hidden" bend lines of sheet metal */
        ZW_DRAWING_SHOWN_THREAD_END_LINE                          = 21, /**<@brief  thread end lines */
        ZW_DRAWING_HIDDEN_THREAD_END_LINE                         = 22, /**<@brief  hidden thread end lines */
        ZW_DRAWING_SHOWN_SHEET_METAL_BEND_NOTE                    = 23, /**<@brief  bend notes of sheet metal */
        ZW_DRAWING_HIDDEN_SHEET_METAL_BEND_NOTE                   = 24, /**<@brief  hidden bend notes of sheet metal */
        ZW_DRAWING_WELD_BEAD_LINE                                 = 25, /**<@brief  lines for weld beads in idx_beads */
        ZW_DRAWING_WELD_BEAD                                      = 26, /**<@brief  weld beads */
        ZW_DRAWING_CROP_LINE                                      = 27, /**<@brief  crop line */
        ZW_DRAWING_COSMETIC_SKETCH_3D_HATCH_LINE                  = 28, /**<@brief  3D hatch lines of cosmetic sketch  */
        ZW_DRAWING_ASSOCIATED_ENTITY                              = 29, /**<@brief  associated entities */
        ZW_DRAWING_ASSOCIATED_DIMENSION                           = 30, /**<@brief  associated dimensions */
    } ezwDrawingGeometryType;

    /**
    @brief section method type
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwSectionMethodType
    {
        ZW_METHOD_SECTION_CURVE    = 1, /**<@brief  Section Method : Section Curves */
        ZW_METHOD_TRIMMED_PART     = 2, /**<@brief  Section Method : Trimmed Part */
        ZW_METHOD_TRIMMED_SURFFACE = 3, /**<@brief  Section Method : Trimmed Surface */
    } ezwSectionMethodType;

    /**
    @brief section location
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwLocationType
    {
        ZW_LOCATION_HORIZONTAL = 1, /**<@brief  Location : Horizontal */
        ZW_LOCATION_VERTICAL   = 2, /**<@brief  Location : Vertical */
        ZW_LOCATION_ORTHOGONAL = 3, /**<@brief  Location : Orthogonal */
        ZW_LOCATION_NONE       = 4, /**<@brief  Location : None */
    } ezwLocationType;

    /**
    @brief section view dimension type
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwSectionViewDimensionType
    {
        ZW_SECTION_VIEW_DIMENSION_TYPE_PROJECT = 0, /**<@brief  dimension type : Projected */
        ZW_SECTION_VIEW_DIMENTION_TYPE_TRUE    = 1, /**<@brief  dimension type : True */
    } ezwSectionViewDimensionType;

    /**
    @brief location angle
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwLocationAngleType
    {
        ZW_LOCATION_ANGLE_DEFAULT    = 0, /**<@brief  default */
        ZW_LOCATION_ANGLE_HORIZONTAL = 1, /**<@brief  horizontal */
        ZW_LOCATION_ANGLE_VERTICAL   = 2, /**<@brief  vertical */
        ZW_LOCATION_ANGLE_CUSTOM     = 3, /**<@brief  custom */
    } ezwLocationAngleType;

     /**
    @brief section method
    @ingroup ZwDrawingViewData
    */
    typedef struct szwViewSectionMethod
    {
        ezwSectionMethodType methodType;           /**<@brief  section method (ZW_METHOD_TRIMPART as default)*/
        int isCloseOpenProfile;                    /**<@brief  close open profiles or not (1 as default)*/
        int isDynamicScalingAngle;                 /**<@brief  dynamic hatch scaling and angle or not (1 as default)*/
        int isInheritSectionBaseView;              /**<@brief  inherit section from base view or not
                                    if base view is not section view, this value can be ignored
                                    if base view is section view, this value equals to 0 or 1*/
        ezwLocationType locationType;              /**<@brief  location type (ZW_LOCATION_ORTHOGONAL as default)*/
        ezwSectionViewDimensionType dimensionType; /**<@brief  dimension type (ZW_VIEW_DIMTYPEPRJ as default)*/
        double sectionDepth;                       /**<@brief  section depth (if methodType = ZW_METHOD_SECTION_CURVE, this can be ignored. )
                                             Only used when call ZwDrawingViewFullSectionCreate to create full section view. */
        ezwLocationAngleType locationAngleType;    /**<@brief  location angle type */
        double locationAngle;                      /**<@brief  location angle (only used when locationAngleType = ZW_LOCATION_ANG_CUSTOM) */
    } szwViewSectionMethod;

    /**
    @brief section line
    @ingroup ZwDrawingViewData
    */
    typedef struct szwViewSectionLine
    {
        char *viewLabel;     /**<@brief  view label (example: "A" becomes "A-A")
                                    the label doesn't duplicate the existing label
                                    null or "" to use default label*/
        int isFlipArrow;     /**<@brief  flip arrow or not (0 as default)*/
        int isShowStepLines; /**<@brief  show step lines or not (0 as default)*/
    } szwViewSectionLine;

    /**
    @brief section option
    @ingroup ZwDrawingViewData
    */
    typedef struct szwViewSectionOption
    {
        int isComponentSectionState; /**<@brief  component section state from part */
        int isComponentHatchState;   /**<@brief  component hatch state from part */
        int isHatchColor;            /**<@brief  hatch color from part */
    } szwViewSectionOption;

    /**
    @brief aligned section view data
    @ingroup ZwDrawingViewData
    */
    typedef struct szwAlignSectionViewData
    {
        szwEntityHandle viewHandle; /**<@brief  the handle data of base view to section */
        szwPoint2 basePoint;        /**<@brief  base point of the section */
        int countBasePoint;         /**<@brief  the count of the base points */
        szwPoint2 *basePointList;   /**<@brief  points to define the section */
        int countAlignPoint;        /**<@brief  the count of the align points */
        szwPoint2 *alignPointList;  /**<@brief  points to define aligned cutting plane */
        szwPoint2 locationPoint;    /**<@brief  the location for section view */

        szwViewSectionMethod sectionMethod; /**<@brief  section method */
        szwViewSectionLine sectionLine;     /**<@brief  section line */
        szwViewSectionOption sectionOption; /**<@brief  section option */

    } szwAlignSectionViewData;

    /**
    @brief view projection type
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwViewProjectionAngleType
    {
        ZW_VIEW_PROJECTION_ANGLE_1ST = 1, /**<@brief  1st angle */
        ZW_VIEW_PROJECTION_ANGLE_3RD = 2, /**<@brief  3rd angle */
    } ezwViewProjectionAngleType;

    /**
    @brief view projection arrow
    @ingroup ZwDrawingViewData
    */
    typedef struct szwViewArrow
    {
        double offset; /**<@brief  view line offset distance (20.0 as default)*/

        int isDefault;        /**<@brief  isDefault = 0, startPoint and endPoint will use default value (user input is invalid)
                                  isDefault > 0, startPoint and endPoint of user input are valid*/
        szwPoint2 startPoint; /**<@brief  arrow start location */
        szwPoint2 endPoint;   /**<@brief  arrow end location */
    } szwViewArrow;
    
    /**
    @brief Projection or Auxiliary view's projection settings
    @ingroup ZwDrawingViewData
    */
    typedef struct szwProjectionSetting
    {
        ezwViewProjectionAngleType projectionType; /**<@brief  Projection or Auxiliary view's projection angle (ZW_VIEW_PROJECTION_ANGLE_3RD as default)*/
        ezwSectionViewDimensionType dimensionType; /**<@brief  Projection or Auxiliary view's dimension type (ZW_VIEW_DIMTYPEPRJ as default)*/
    } szwProjectionSetting;
    
    /**
    @brief Auxiliary view data
    @ingroup ZwDrawingViewData
    */
    typedef struct szwAuxiliaryViewData
    {
        szwEntityHandle viewHandle;    /**<@brief  the handle data of base view */
        szwEntityHandle lineHandle;    /**<@brief  line to define auxiliary view plane (this must be a line)*/
        szwPoint2 locationPoint;       /**<@brief  view location */
        szwProjectionSetting settings; /**<@brief  projection settings */
        szwViewArrow arrowInformation; /**<@brief  view arrow */
        zwString32 viewLabel;          /**<@brief  view label (example: "A" becomes "A-A")
                                    the label doesn't duplicate the existing label
                                    null or "" to use default label*/

    } szwAuxiliaryViewData;

    /**
    @brief option of break line
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwBreakLineType
    {
        ZW_HORIZONTAL_BREAKLINE = 0, /**<@brief  Horizontal break line */
        ZW_VERTICAL_BREAKLINE,       /**<@brief  Vertical break line */
        ZW_SLANT_BREAKLINE           /**<@brief  Slant break line */
    } ezwBreakLineType;

    /**
    @brief information we need when create break line
    @ingroup ZwDrawingViewData
    */
    typedef struct szwBreakLineData
    {
        ezwBreakLineType breakLineType; /**<@brief  option of break line */
        szwEntityHandle viewHandle;     /**<@brief  handle data of view */
        szwPoint2 points[3];            /**<@brief  3 input points depend on option of break line.
                             only ZW_SLANT_BREAKLINE needs the third point, others need two points */
        double gap;                     /**<@brief  gap size */
        svxPoint2 direction;            /**<@brief  direction setting, only required when evxBrkLineType is ZW_SLANT_BREAKLINE */
    } szwBreakLineData;

    /**
    @brief Drawing Detail Method
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwDrawingDetailMethod
    {
        ZW_RECTANGULAR_DETAIL = 1, /**<@brief  rectangular detail view */
        ZW_CIRCULAR_DETAIL    = 2, /**<@brief  circular detail view */
        ZW_POLYLINE_DETAIL    = 3, /**<@brief  polyline detail view */
    } ezwDrawingDetailMethod;

    /**
    @brief Drawing Detail input infos
    @ingroup ZwDrawingViewData
    */
    typedef struct szwDrawingDetailData
    {
        ezwDrawingDetailMethod method; /**<@brief  Detail Method */
        szwEntityHandle viewHandle;    /**<@brief  Base view */
        int pointCount;                /**<@brief  all points count */
        szwPoint2 *pointList;          /**<@brief  pick points defining the detail boundary */
        szwPoint2 notePoint;           /**<@brief  pick point for note */
        int multiplier;                /**<@brief  local magnification */
        szwPoint2 location;            /**<@brief  local detail view position */
    } szwDrawingDetailData;

    /**
    @brief Drawing Broken Section Boundary Method
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwDrawingBoundaryMethod
    {
        ZW_RECTANGULAR_BOUNDARY = 1, /**<@brief  Rectangular boundary */
        ZW_CIRCULAR_BOUNDARY    = 2, /**<@brief  Circular boundary */
        ZW_POLYLINE_BOUNDARY    = 3, /**<@brief  Polyline boundary */
        ZW_SPLINE_BOUNDARY      = 7, /**<@brief  Spline boundary */
    } ezwDrawingBoundaryMethod;

    /**
    @brief Drawing Broken Section Depth type
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwDrawingDepthType
    {
        ZW_DEPTH_POINT,         /**<@brief  point */
        ZW_DEPTH_SECTION_PLANE, /**<@brief  section plane */
        ZW_DEPTH_3D_NAMED,      /**<@brief  3d named */
    } ezwDrawingDepthType;

    /**
    @brief The Coordinates of The Four Vertices of The Border.
    @ingroup ZwDrawingViewData
    */
    typedef struct szwDrawingDottedBorder
    {
        szwPoint2 upperLeft;   /**<@brief  Top left corner */
        szwPoint2 upperRight;  /**<@brief  Top right corner */
        szwPoint2 bottomLeft;  /**<@brief  Left bottom */
        szwPoint2 bottomRight; /**<@brief  Right bottom */
    } szwDrawingDottedBorder;

    /**
    @brief full section view data
    @ingroup ZwDrawingViewData
    */
    typedef struct szwFullSectionViewData
    {
        szwEntityHandle viewHandle; /**<@brief  the handle data of base view to section */

        int countDefineSectionPoint;       /**<@brief  the count of the points */
        szwPoint2 *defineSectionPointList; /**<@brief  points to define section */

        szwPoint2 locationPoint;            /**<@brief  the location for section view */
        szwViewSectionMethod sectionMethod; /**<@brief  section method */
        szwViewSectionLine sectionLine;     /**<@brief  section line */
        szwViewSectionOption sectionOption; /**<@brief  section option */
    } szwFullSectionViewData;

    /**
    @brief Drawing Broken Section input infos
    @ingroup ZwDrawingViewData
    */
    typedef struct szwDrawingBrokenSectionData
    {
        ezwDrawingBoundaryMethod method; /**<@brief  Boundary Method */
        szwEntityHandle viewHandle;      /**<@brief  Base view */
        int countBoundaryPoint;          /**<@brief  count of "boundaryPointList" */
        szwPoint2 *boundaryPointList;    /**<@brief  The boundary is made up of points */
        ezwDrawingDepthType depthType;   /**<@brief  depth type */


        union RequiredData
        {
            struct Point
            {
                szwPoint2 depthPoint;        /**<@brief  depth point */
                double depthOffset;          /**<@brief  depth offset */
                szwEntityHandle curveHandle; /**<@brief  curve handle.
                                      if type == ZW_DEPTH_POINT, point "depthPoint" must be on the curve "curveHandle" */
            } point;

            struct SectionPlane
            {
                szwEntityHandle depthViewHandle; /**<@brief  depth view */
                szwPoint2 depthPoint;            /**<@brief  depth point */
                int countOffsetPoint;            /**<@brief  count of "offsetPointList" */
                szwPoint2 *offsetPointList;      /**<@brief  offset points */
            } sectionPlane;

            zwString32 name; /**<@brief  3D name */

        } required;

        struct szwBrokenSectionSettings
        {
            int isShowStepLine;    /**<@brief  show step lines. 1: show step line, 0: not show step line */
            int isDynamicHatch;    /**<@brief  dynamic hatch scaling and angle. 1: use dynamic hatch, 0: not use dynamic hatch */
            int isShownHiddenLine; /**<@brief  show hidden line. 1: show hidden line, 0: not show hidden line. */
        } settings;
    } szwDrawingBrokenSectionData;
	
	/**
    @brief view display mode
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwViewDisplayMode
    {
        ZW_VIEW_WIREFRAME = 0,    /**<@brief  wireframe */
        ZW_VIEW_HIDDEN_LINE,      /**<@brief  hidden line */
        ZW_VIEW_SHADED,           /**<@brief  shaded */
        ZW_VIEW_FAST_HIDDEN_LINE, /**<@brief  fast hidden line */
    } ezwViewDisplayMode;

    /**
    @brief view inherit PMI
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwViewInheritPMIType
    {
        ZW_VIEW_INHERIT_PMI_OFF = 0,  /**<@brief  inherit PMI off */
        ZW_VIEW_INHERIT_PARALLEL_PMI, /**<@brief  inherit parallel PMI */
        ZW_VIEW_INHERIT_ALL_PMI,      /**<@brief  inherit all PMI */
        ZW_VIEW_INHERIT_FROM_VIEW,    /**<@brief  inherit from view */
    } ezwViewInheritPMIType;

    /**
    @brief view mirror method
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwViewMirrorType
    {
        ZW_VIEW_MIRROR_OFF = 0,    /**<@brief  mirror view off */
        ZW_VIEW_MIRROR_HORIZONTAL, /**<@brief  horizontal mirror view */
        ZW_VIEW_MIRROR_VERTICAL,   /**<@brief  vertical mirror view */
    } ezwViewMirrorType;

    /**
    @brief view scale type
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwViewScaleType
    {
        ZW_VIEW_USE_CUSTOM_SCALE = 0,  /**<@brief  use explicitly assigned to view by user */
        ZW_VIEW_USE_SHEET_SCALE,       /**<@brief  use sheet scale */
        ZW_VIEW_USE_PARENT_VIEW_SCALE, /**<@brief use parent view scale */
    } ezwViewScaleType;

    /**
    @brief view label prefix
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwViewLabelPrefix
    {
        ZW_VIEW_LABEL_PREFIX_NONE = 0,  /**<@brief  none */
        ZW_VIEW_LABEL_PREFIX_VIEW,      /**<@brief  prefix view (VIEW) */
        ZW_VIEW_LABEL_PREFIX_AUXILIARY, /**<@brief  prefix auxiliary (AUXILIARY) */
        ZW_VIEW_LABEL_PREFIX_SECTION,   /**<@brief  prefix section (SECTION) */
        ZW_VIEW_LABEL_PREFIX_DETAIL,    /**<@brief  prefix detail (DETAIL) */
    } ezwViewLabelPrefix;

    /**
    @brief view label format
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwViewLabelFormat
    {
        ZW_VIEW_LABEL_FORMAT_X = 0, /**<@brief  only display one label */
        ZW_VIEW_LABEL_FORMAT_X_X,   /**<@brief  display two labels separated by a short horizontal line (X-X) */
        ZW_VIEW_LABEL_FORMAT_XX,    /**<@brief  display two labels separated by a space (XX) */
    } ezwViewLabelFormat;

    /**
    @brief view scale prefix
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwViewScalePrefix
    {
        ZW_VIEW_SCALE_PREFIX_NONE = 0,    /**<@brief  none */
        ZW_VIEW_SCALE_PREFIX_SCALE,       /**<@brief  prefix scale (SCALE) */
        ZW_VIEW_SCALE_PREFIX_SCALE_COLON, /**<@brief  prefix scale with colon (SCALE:) */
    } ezwViewScalePrefix;

    /**
    @brief view scale format
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwViewScaleFormat
    {
        ZW_VIEW_SCALE_SEPARATE_BACKSLASH = 0,              /**<@brief  use backslash to separate (X/Y) */
        ZW_VIEW_SCALE_SEPARATE_COLON,                      /**<@brief  use colon to separate (X:Y) */
        ZW_VIEW_SCALE_SEPARATE_DOT,                        /**<@brief  use dot to separate (X.Y) */
        ZW_VIEW_SCALE_SEPARATE_BACKSLASH_WITH_PARENTHESIS, /**<@brief  use backslash to separate and with parenthesis ((X/Y)) */
        ZW_VIEW_SCALE_SEPARATE_COLON_WITH_PARENTHESIS,     /**<@brief  use colon to separate and with parenthesis ((X:Y)) */
        ZW_VIEW_SCALE_SEPARATE_DOT_WITH_PARENTHESIS,       /**<@brief  use dot to separate and with parenthesis ((X.Y)) */
    } ezwViewScaleFormat;

    /**
    @brief view label alignment type
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwViewLabelAlignment
    {
        ZW_VIEW_LABEL_ALIGN_HORIZONTAL = 0,          /**<@brief  label and scale are aligned horizontally */
        ZW_VIEW_LABEL_ALIGN_VERTICAL,                /**<@brief  label and scale are aligned vertically */
        ZW_VIEW_LABEL_ALIGN_VERTICAL_WITH_DELIMITER, /**<@brief  label and scale are aligned vertically and add delimiter */
    } ezwViewLabelAlignment;

    /**
    @brief view label position
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwViewLabelPosition
    {
        ZW_VIEW_LABEL_ABOVE_VIEW = 0, /**<@brief  label and scale are above view */
        ZW_VIEW_LABEL_BELOW_VIEW,     /**<@brief  label and scale are below view */
    } ezwViewLabelPosition;

    /**
    @brief view layout display attributes
    @ingroup ZwDrawingViewData
    */
    typedef struct szwViewAttribute
    {
        ezwViewDisplayMode displayMode; /**<@brief  display mode */

        int checkHiddenLine;  /**<@brief  hidden line check for intersecting shapes (1: on; 0: off) */
        int regen;            /**<@brief  enable view regen (1: on; 0: off) */
        int toArcs;           /**<@brief  convert curves to arc (1: on; 0: off) */
        int removeDuplicated; /**<@brief  remove duplicated curves (1: on; 0: off) */

        int showHiddenLine;   /**<@brief  show hidden lines (1: on; 0: off) */
        int showCenterLine;   /**<@brief  show center lines (1: on; 0: off) */
        int showThread;       /**<@brief  show threads (1: on; 0: off) */
        int showDimension;    /**<@brief  show dimensions from part (1: on; 0: off) */
        int show3DText;       /**<@brief  show texts from part (1: on; 0: off) */
        int show3DCurves;     /**<@brief  show 3D curves from part (1: on; 0: off) */
        int show3DOrigin;     /**<@brief  show 3D zero point (1: on; 0: off) */
        int showBendLine;     /**<@brief  show bend lines from sheet metal (1: on; 0: off) */
        int showWeldBead;     /**<@brief  show weld beads from part (1: on; 0: off) */
        int showProjectDatum; /**<@brief  show projected datum (1: on; 0: off) */
        int showBendNotes;    /**<@brief  show bend notes (1: on; 0: off) */

        ezwViewInheritPMIType inheritPMI; /**<@brief  show PMI inherited from part */
        ezwViewMirrorType viewMirror;     /**<@brief  mirror view */

        int showScale;              /**<@brief  show scale (1: on; 0: off) */
        ezwViewScaleType scaleType; /**<@brief  scale type */
        double scaleRatioX;         /**<@brief  scale ratio value X ( > 0.01, view scale is scaleRatioX/scaleRatioY) */
        double scaleRatioY;         /**<@brief  scale ratio value Y ( > 0.01, view scale is scaleRatioX/scaleRatioY) */

        int showLabel;    /**<@brief  show label (1: on; 0: off) */
        zwString32 label; /**<@brief  view label */

        ezwViewLabelPrefix labelPrefix;     /**<@brief  label prefix */
        ezwViewLabelFormat labelFormat;     /**<@brief  label format */
        ezwViewScalePrefix scalePrefix;     /**<@brief  scale prefix */
        ezwViewScaleFormat scaleFormat;     /**<@brief  scale format */
        ezwViewLabelAlignment labelAlign;   /**<@brief  label alignment type */
        ezwViewLabelPosition labelPosition; /**<@brief  label position */
        int showViewArrow;                  /**<@brief  show the projection direction arrow (1: on; 0: off) */
        int showShape;                      /**<@brief  1 to show and 0 to hide shape. */
    } szwViewAttribute;

    /**
    @brief type of rotate view
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwRotateViewType
    {
        ZW_ROTATE_VIEW_TOP = 1,                      /**<@brief  top */
        ZW_ROTATE_VIEW_FRONT,                        /**<@brief  front */
        ZW_ROTATE_VIEW_RIGHT,                        /**<@brief  right */
        ZW_ROTATE_VIEW_BACK,                         /**<@brief  back */
        ZW_ROTATE_VIEW_BOTTOM,                       /**<@brief  bottom */
        ZW_ROTATE_VIEW_LEFT,                         /**<@brief  left */
        ZW_ROTATE_VIEW_ISOMETRIC,                    /**<@brief  isometric */
        ZW_ROTATE_VIEW_ISOMETRIC_LFFT_FRONT_TOP,     /**<@brief  isometric_left-front-top */
        ZW_ROTATE_VIEW_ISOMETRIC_LEFT_BACK_TOP,      /**<@brief  isometric_left-back-top */
        ZW_ROTATE_VIEW_ISOMETRIC_RIGHT_BACK_TOP,     /**<@brief  isometric_right-back-top */
        ZW_ROTATE_VIEW_ISOMETRIC_RIGHT_FRONT_BOTTOM, /**<@brief  isometric_right-front-bottom */
        ZW_ROTATE_VIEW_ISOMETRIC_LEFT_FRONT_BOTTOM,  /**<@brief  isometric_left-front-bottom */
        ZW_ROTATE_VIEW_ISOMETRIC_LEFT_BACK_BOTTOM,   /**<@brief  isometric_left-back-bottom */
        ZW_ROTATE_VIEW_ISOMETRIC_RIGHT_BACK_BOTTOM,  /**<@brief  isometric_right-back-bottom */
        ZW_ROTATE_VIEW_CUSTOM,                       /**<@brief  custom view */
    } ezwRotateViewType;

    /**
    @brief view type
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwBasicViewType
    {
        ZW_BASIC_VIEW_ALL        = 0, /**<@brief  any view type */
        ZW_BASIC_VIEW_BASE       = 1, /**<@brief  base view */
        ZW_BASIC_VIEW_PROJECT    = 2, /**<@brief  project view */
        ZW_BASIC_VIEW_SECTION    = 3, /**<@brief  section view */
        ZW_BASIC_VIEW_DETAIL     = 4, /**<@brief  detail view */
        ZW_BASIC_VIEW_DEFINITION = 5  /**<@brief  definition view */
    } ezwBasicViewType;

    /**
    @brief Rotate View data
    @ingroup ZwDrawingViewData
    */
    typedef struct szwDrawingRotateViewData
    {
        ezwRotateViewType viewType;       /**<@brief  type of View (default value:ZW_ROTVIEW_TOP): to set the view projection direction*/
        ezwAxisType axisType;             /**<@brief  type of Axis, default value:ZW_AXIS_Z*/
        double angle;                     /**<@brief  rotate angle default value:0*/
        szwEntityHandle customViewHandle; /**<@brief  view handle in part, taking effect only when view = ZW_ROTVIEW_CUSTOM */
    } szwDrawingRotateViewData;

    /**
    @brief drawing view creation method
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwDrawingViewMethod
    {
        ZW_VIEW_NULL                         = 0,  /**<@brief  undefined */
        ZW_VIEW_STANDARD_TOP                 = 1,  /**<@brief  top view */
        ZW_VIEW_STANDARD_FRONT               = 2,  /**<@brief  front view */
        ZW_VIEW_STANDARD_RIGHT               = 3,  /**<@brief  right view */
        ZW_VIEW_STANDARD_BACK                = 4,  /**<@brief  back view */
        ZW_VIEW_STANDARD_BOTTOM              = 5,  /**<@brief  bottom view */
        ZW_VIEW_STANDARD_LEFT                = 6,  /**<@brief  left view */
        ZW_VIEW_ISO_FRONT                    = 7,  /**<@brief  front isometric view */
        ZW_VIEW_AUXILIARY                    = 8,  /**<@brief  auxiliary view */
        ZW_VIEW_NAMED                        = 9,  /**<@brief  named view */
        ZW_VIEW_3RD_ANGLE_UP                 = 10, /**<@brief  view projected 3rd angle from above */
        ZW_VIEW_3RD_ANGLE_DOWN               = 11, /**<@brief  view projected 3rd angle from below */
        ZW_VIEW_3RD_ANGLE_RIGHT              = 12, /**<@brief  view projected 3rd angle from right */
        ZW_VIEW_3RD_ANGLE_LEFT               = 13, /**<@brief  view projected 3rd angle from left */
        ZW_VIEW_1ST_ANGLE_UP                 = 14, /**<@brief  view projected 1st angle from above */
        ZW_VIEW_1ST_ANGLE_DOWN               = 15, /**<@brief  view projected 1st angle from below */
        ZW_VIEW_1ST_ANGLE_RIGHT              = 16, /**<@brief  view projected 1st angle from right */
        ZW_VIEW_1ST_ANGLE_LEFT               = 17, /**<@brief  view projected 1st angle from left */
        ZW_VIEW_3RD_ANGLE_PROJECT_ANGLE      = 18, /**<@brief  view projected at angle, 3rd angle projection */
        ZW_VIEW_DETAIL                       = 19, /**<@brief  detail view */
        ZW_VIEW_SECTION                      = 20, /**<@brief  section view */
        ZW_VIEW_DETAIL_DEFINITION            = 21, /**<@brief  detail definition */
        ZW_VIEW_SECTION_DEFINITION           = 22, /**<@brief  section definition */
        ZW_VIEW_REVOLVED_SECTION_DEFINITION  = 23, /**<@brief  revolved section definition */
        ZW_VIEW_ROTATED                      = 24, /**<@brief  rotated view */
        ZW_VIEW_ALIGNED_SECTION_DEFINITION   = 25, /**<@brief  aligned section definition */
        ZW_VIEW_PROJECT_ANGLE_ARROWS         = 26, /**<@brief  aux view arrows */
        ZW_VIEW_BEND_SECTION_DEFINITION      = 27, /**<@brief  bend section definition */
        ZW_VIEW_ISOMETRIC_LEFT_FRONT_TOP     = 28, /**<@brief  left-front-top side isometric view */
        ZW_VIEW_ISOMETRIC_LEFT_BACK_TOP      = 29, /**<@brief  left-back-top side isometric view */
        ZW_VIEW_ISOMETRIC_RIGHT_BACK_TOP     = 30, /**<@brief  right-back-top side isometric view */
        ZW_VIEW_ISOMETRIC_RIGHT_FRONT_BOTTOM = 31, /**<@brief  right-front-bottom side isometric view */
        ZW_VIEW_ISOMETRIC_LEFT_FRONT_BOTTOM  = 32, /**<@brief  left-front-bottom side isometric view */
        ZW_VIEW_ISOMETRIC_LEFT_BACK_BOTTOM   = 33, /**<@brief  left-back-bottom side isometric view */
        ZW_VIEW_ISOMETRIC_RIGHT_BACK_BOTTOM  = 34, /**<@brief  right-back-bottom side isometric view */
        ZW_VIEW_NAMED_SECTION_DEFINITION     = 35, /**<@brief  3D named section definition */
        ZW_VIEW_1ST_ANGLE_PROJECT_ANGLE      = 36, /**<@brief  view projected at angle, 1st angle projection */
        ZW_VIEW_BROKEN_SECTION               = 37, /**<@brief  broken section */
        ZW_VIEW_ISOMETRIC_SECTION            = 38, /**<@brief  3D isometric section view */
        ZW_VIEW_DIMETRIC                     = 39, /**<@brief  dimetric view */
        ZW_VIEW_SHEET_METAL_FLAT             = 40  /**<@brief  selected sheet metal flat item view */
    } ezwDrawingViewMethod;

    /**
    @brief reference entity data.
    
    fileName,partName and entityClass parameters of this structure must be filled in,
    and other parameters are optional according to whether the referenced part or assembly.
    
    if entityClass is component,component and depth must be entered.
    else, shellName must be entered.
    @ingroup ZwDrawingViewData
    */
    typedef struct szwReferenceEntityData
    {
        zwPath fileName;           /**<@brief  file name */
        zwRootName partName;       /**<@brief  part name */
        zwString256 shellName;     /**<@brief  shape name, format: shape_name(feature_name) */
        szwEntityHandle component; /**<@brief  handle of the component */
        enum ezwReferenceType
        {
            ZW_REFERENCE_COMPONENT     = 0, /**<@brief reference of component */
            ZW_REFERENCE_SOLID_SHELL   = 1, /**<@brief reference of solid shell */
            ZW_REFERENCE_SURFACE_SHELL = 2  /**<@brief reference of surface shell */
        } entityClass;                      /**<@brief  0: component; 1: solid shell; 2: surface shell */
        int depth;                          /**<@brief  depth of the component (top=0,1,2...) */
    } szwReferenceEntityData;

    /**
    @brief drawing view type
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwStandardViewType
    {
        ZW_STANDARD_VIEW_NATIVE_TYPE             = 0, /**<@brief use native type*/
        ZW_STANDARD_VIEW_CUSTOM_TYPE             = 1, /**<@brief use view manager custom view name(this manager in part environment)*/
        ZW_STANDARD_VIEW_FLATTENING_FEATURE_NAME = 2  /**<@brief use flattening feature name of a sheet metal module(this manager in part environment)*/
    } ezwStandardViewType;

    /**
    @brief drawing view standard data
    @ingroup ZwDrawingViewData
    */
    typedef struct szwViewStandardData
    {
        zwPath path;              /**<@brief  file path add file name (including the extension) */
        zwRootName rootName;      /**<@brief  root name */
        ezwStandardViewType type; /**<@brief  standard view type */
        union uzwViewTypeData     /**<@brief  union of view type data */
        {
            zwString32 viewName;           /**<@brief  view Name. if type = 1,apply it. */
            zwString32 flatName;           /**<@brief  flatten Name. if type = 2, apply it. */
            ezwDrawingViewMethod viewType; /**<@brief  View type(1-7,28-34,39). if type = 0,apply it. */
        } option;
        szwPoint2 location;         /**<@brief  location */
        int defaultOrigin;          /**<@brief  if use default origin ,default:1 */
        int defaultCoordinate;      /**<@brief  if use default coordinate,default:1 */
        zwString32 partConfig;      /**<@brief  part config name ,partConfig[0]=0 to ignore */
        zwString32 componentConfig; /**<@brief  component configuration name, componentConfig[0]=0 to ignore */
        int explodedView;           /**<@brief  if use exploded view ,default:0 */
        int isDisplayTrails;        /**<@brief  1 if display exploded trails ,else 0.default:0 */
        int backupIndex;            /**<@brief  index for the backup feature, default:1 */
        int dimensionType;          /**<@brief  0 if projected, 1 if true. default:0. */
        int isCalculate;            /**<@brief  1 if calculate part center ,else 0. default:1 */
        int isOrientation;          /**<@brief  1 if view orientation from parent, else 0. default:1 */
        zwString32 viewLabel;       /**<@brief  view label (example: "A" becomes "A-A") the label doesn't duplicate the existing label, empty to use default label*/
        ezwViewScaleType scaleType; /**<@brief  scale type */
        double scaleRatioX;         /**<@brief  scale ratio value X ( > 0.01, view scale is scaleRatioX/scaleRatioY) */
        double scaleRatioY;         /**<@brief  scale ratio value Y ( > 0.01, view scale is scaleRatioX/scaleRatioY) */
        szwMatrix *customMatrix;    /**<@brief  rotate direction during projecting the view. NULL to ignore.
                                         "type" and "uzwViewTypeData" will not take effect when using this parameter. */

    } szwViewStandardData;

    /**
    @brief projection dimension type
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwProjectionDimensionType
    {
        ZW_DIMENSION_PROJECTION = 0, /**<@brief  projection type*/
        ZW_DIMENSION_REALITY    = 1  /**<@brief  reality type*/
    } ezwProjectionDimensionType;

    /**
    @brief projection angle type
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwProjectionAngleType
    {
        ZW_1ST_VIEW_ANGLE = 1, /**<@brief  1st angle*/
        ZW_3RD_VIEW_ANGLE = 2  /**<@brief  3rd angle*/
    } ezwProjectionAngleType;

    /**
    @brief projection view data
    @ingroup ZwDrawingViewData
    */
    typedef struct szwProjectionViewData
    {
        szwEntityHandle baseView;                 /**<@brief  the view to be projected*/
        szwPoint2 location;                       /**<@brief  projection view position*/
        ezwProjectionAngleType angleType;         /**<@brief  view angle type*/
        ezwProjectionDimensionType dimensionType; /**<@brief  dimension type */
        zwString32 viewLabel;                     /**<@brief  view label (example: "A" becomes "A-A")
                            the label doesn't duplicate the existing label
                            empty to use default label*/
        ezwViewScaleType scaleType;               /**<@brief  scale type */
        double scaleRatioX;                       /**<@brief  scale ratio value X ( > 0.01, view scale is scaleRatioX/scaleRatioY) */
        double scaleRatioY;                       /**<@brief  scale ratio value Y ( > 0.01, view scale is scaleRatioX/scaleRatioY) */
    } szwProjectionViewData;

    /**
    @brief line type ids for view attribute line types
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwViewLineAttribute
    {
        ZW_VISIBLE_LINE_ATTRIBUTE         = 0,  /**<@brief  visible line attribute */
        ZW_HIDE_LINE_ATTRIBUTE            = 1,  /**<@brief  hidden line attribute */
        ZW_TANGENT_LINE_ATTRIBUTE         = 2,  /**<@brief  tangent line attribute */
        ZW_SECTION_LINE_ATTRIBUTE         = 3,  /**<@brief  section line attribute */
        ZW_DETAIL_LINE_ATTRIBUTE          = 4,  /**<@brief  detail border line attribute */
        ZW_CENTER_LINE_ATTRIBUTE          = 5,  /**<@brief  center line attribute */
        ZW_THREAD_LINE_ATTRIBUTE          = 6,  /**<@brief  thread line attribute */
        ZW_VIEW_LINE_ATTRIBUTE            = 7,  /**<@brief  view line attribute */
        ZW_WIRE_LINE_ATTRIBUTE            = 8,  /**<@brief  visible 3D curve attribute */
        ZW_TANGENT_HIDE_LINE_ATTRIBUTE    = 9,  /**<@brief  hidden tangent line attribute */
        ZW_WIRE_HIDE_LINE_ATTRIBUTE       = 10, /**<@brief  hidden 3D curve attribute */
        ZW_CENTER_HIDE_LINE_ATTRIBUTE     = 11, /**<@brief  hidden center line attribute */
        ZW_THREAD_HIDE_LINE_ATTRIBUTE     = 12, /**<@brief  hidden thread line attribute */
        ZW_BEND_LINE_ATTRIBUTE            = 13, /**<@brief  bend line attribute */
        ZW_BEND_HIDE_LINE_ATTRIBUTE       = 14, /**<@brief  hidden bend line attribute */
        ZW_THREAD_END_LINE_ATTRIBUTE      = 15, /**<@brief  thread end line attribute */
        ZW_THREAD_END_HIDE_LINE_ATTRIBUTE = 16, /**<@brief  hidden thread end line attribute */
        ZW_CROP_LINE_ATTRIBUTE            = 17, /**<@brief  crop line attribute */
        ZW_ENVELOPE_LINE_ATTRIBUTE        = 18, /**<@brief  envelope line attribute */
    } ezwViewLineAttribute;

    /**
    @brief the attachment type of the view dimension
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwViewDimensionType
    {
        ZW_VIEW_ALL_DIMENSION,       /**<@brief  all dimensions associated with the view */
        ZW_VIEW_FROM_PART_PMI,       /**<@brief  PMI inherited from part */
        ZW_VIEW_FROM_PART_DIMENSION, /**<@brief  feature dimensions inherited from part */
        ZW_VIEW_ASSOCIATE_DIMENSION, /**<@brief  dimensions associated to view by association command */
        ZW_VIEW_GENERAL_DIMENSION,   /**<@brief  dimensions created based on the geometry in the view */
    } ezwViewDimensionType;
    
    /**
    @brief discrete projection quality
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwDrawingDiscreteProjectionQuality
    {
        ZW_DRAWING_DISCRETE_PROJECT_DISCRETE = 0, /**<@brief  discrete, low quality */
        ZW_DRAWING_DISCRETE_PROJECT_PRECISE  = 1, /**<@brief  precise, high quality */
    } ezwDrawingDiscreteProjectionQuality;

    /**
    @brief discrete projection state get
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwDrawingDiscreteProjectionState
    {
        ZW_DRAWING_DISCRETE_PROJECT_NOT_DISCRETE     = 0, /**<@brief  not a discrete projection view */
        ZW_DRAWING_DISCRETE_PROJECT_LOW_QUALITY      = 1, /**<@brief  low quality, When the Discrete View Generation mode is "Discrete". */
        ZW_DRAWING_DISCRETE_PROJECT_HIGH_QUALITY_PRE = 2, /**<@brief  pre-high quality, calculating 2D geometry data, 
                                                            when the Discrete View Generation mode is "Precise". */
        ZW_DRAWING_DISCRETE_PROJECT_HIGH_QUALITY     = 3, /**<@brief   high quality, calculation completed,
                                                        when the Discrete View Generation mode is "Precise" */
    } ezwDrawingDiscreteProjectionState;

    /**
    @brief drawing view type
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwDrawingViewType
    {
        ZW_DRAWING_ALL_VIEW        = 0, /**<@brief  any view type */
        ZW_DRAWING_BASE_VIEW       = 1, /**<@brief  base view */
        ZW_DRAWING_PROJECT_VIEW    = 2, /**<@brief  project view */
        ZW_DRAWING_SECTION_VIEW    = 3, /**<@brief  section view */
        ZW_DRAWING_DETAIL_VIEW     = 4, /**<@brief  detail view */
        ZW_DRAWING_DEFINITION_VIEW = 5  /**<@brief  definition view */
    } ezwDrawingViewType;

    /**
    @brief brief View reference part information
    @ingroup ZwDrawingViewData
    */
    typedef struct szwReferencePart
    {
        zwPath fileName;     /**<@brief  file name */
        zwRootName partName; /**<@brief  part name (root name) */
    } szwReferencePart;

    /**
    @brief layer assignment mode
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwLayerAssignMode
    {
        ZW_LAYER_FROM_PART = 0, /**<@brief  assign geometry to the layer of reference geometry in the reference part */
        ZW_LAYER_BY_VIEW,       /**<@brief  layer of view */
        ZW_LAYER_SPECIFIED,     /**<@brief  specified layer */
    } ezwLayerAssignMode;

    /**
    @brief object layer data in view
    @ingroup ZwDrawingViewData
    */
    typedef struct szwViewObjectLayerData
    {
        ezwLayerAssignMode assignMode; /**<@brief  layer assignment mode */
        int idLayer;                   /**<@brief  index of layer (0 ~ 255), valid when assignMode is ZW_LAYER_SPECIFIED */
    } szwViewObjectLayerData;

    /**
    @brief line type for view attribute line types
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwViewLineType
    {
        ZW_VISIBLE_LINE           = 0,  /**<@brief  visible line */
        ZW_HIDDEN_LINE            = 1,  /**<@brief  hidden line */
        ZW_TANGENT_LINE           = 2,  /**<@brief  tangent line */
        ZW_SECTION_LINE           = 3,  /**<@brief  section line */
        ZW_DETAIL_BORDER_LINE     = 4,  /**<@brief  detail border line attribute */
        ZW_CENTER_LINE            = 5,  /**<@brief  center line attribute */
        ZW_THREAD_LINE            = 6,  /**<@brief  thread line attribute */
        ZW_VIEW_LINE              = 7,  /**<@brief  view line attribute */
        ZW_VISIBLE_3D_LINE        = 8,  /**<@brief  visible 3D curve attribute */
        ZW_TANGENT_HIDDEN_LINE    = 9,  /**<@brief  tangent hidden line attribute */
        ZW_HIDDEN_3D_LINE         = 10, /**<@brief  hidden 3D curve attribute */
        ZW_HIDDEN_CENTER_LINE     = 11, /**<@brief  hidden center line attribute */
        ZW_HIDDEN_THREAD_LINE     = 12, /**<@brief  hidden thread line attribute */
        ZW_BEND_LINE              = 13, /**<@brief  bend line attribute */
        ZW_HIDDEN_BEND_LINE       = 14, /**<@brief  hidden bend line attribute */
        ZW_THREAD_END_LINE        = 15, /**<@brief  thread end line attribute */
        ZW_HIDDEN_THREAD_END_LINE = 16, /**<@brief  hidden thread end line attribute */
        ZW_CROP_LINE              = 17, /**<@brief  crop line attribute */
        ZW_ENVELOPE_LINE          = 18, /**<@brief  envelope line attribute */
    } ezwViewLineType;

    /**
    @brief break Line style
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwBreakLineStyle
    {
        ZW_ZERO_ZIG_ZAG_BREAKLINE = 0, /**<@brief  line */
        ZW_ONE_ZIG_ZAG_BREAKLINE,      /**<@brief  single zig zag of broken line */
        ZW_TWO_ZIG_ZAG_BREAKLINE,      /**<@brief  double zig zag of broken line */
        ZW_CURVE_BREAKLINE             /**<@brief  curve */
    } ezwBreakLineStyle;

    /**
    @brief attribute of break line
    @ingroup ZwDrawingViewData
    */
    typedef struct szwBreakLineAttribute
    {
        szwLineAttribute lineAttribute;   /**<@brief  line attributes */
        szwViewObjectLayerData layer;     /**<@brief  layer */
        double gapSize;                   /**<@brief  gap size */
        ezwBreakLineStyle breakLineStyle; /**<@brief  break line style */
    } szwBreakLineAttribute;

    /**
    @brief view projection type
    @ingroup ZwDrawingViewData
    */
    typedef enum ezwViewProjectionType
    {
        ZW_VIEW_PROJECTION_NULL     = 0, /**@brief invalid type */
        ZW_VIEW_PROJECTION_DISCRETE = 1, /**<@brief Discrete projection */
        ZW_VIEW_PROJECTION_REAL     = 2, /**<@brief  Real projection, not discrete projection */
    } ezwViewProjectionType;

/*
*********************************************************************
**  END HEADER FILE
*********************************************************************
*/

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* ZW_API_DRAWING_VIEW_DATA_H */
