/**
@file zwapi_feature_general.h
@copyright (C) Copyright 2023, ZWSOFT Co., LTD.(Guangzhou) All Rights Reserved.
@note THE HEADER FILE FOR THE ZW3D Feature API
*/

#pragma once
#ifndef ZW_API_FEATURE_GENERAL_H /* this ifndef surrounds entire header */
#define ZW_API_FEATURE_GENERAL_H

#include "zwapi_feature_general_data.h"
#include "zwapi_matrix_data.h"

#ifdef __cplusplus
extern "C"
{
#endif /* __cplusplus */

    //====================================================================================================================
    /** @name Feature Query */
    //====================================================================================================================
	/**
    @ingroup ZwFeatureGeneral

    Outputs a list of handle  of assembly features (like Pattern Geometry and Mirror) in the current active part.
    If there are no features, "*countFeature" is output as zero and "*featureList" as NULL.

    @note
    The caller is responsible to free the featureList by using ZwEntityHandleListFree().

    @param [out] countFeature   number of assembly features in the specified part
    @param [out] featureList   list of handle data's of assembly features in the specified part

    @retval succeeds
    -        ZW_API_NO_ERROR
    @retval fail
    -        ZW_API_GENERAL_ERROR
    -        ZW_API_INVALID_OUTPUT
    -        ZW_API_FILE_LOCATE_FAIL
    -        ZW_API_INPUT_TYPE_ERROR
    -        ZW_API_OBJ_DATA_GET_ERROR
    -        ZW_API_OUT_OF_RANGE
    */
    ZW_API_C ezwErrors ZwAssemblyFeatureListGet(int *countFeature, szwEntityHandle **featureList);

    /**
    @ingroup zwapi_feature_general

    Copy the specified entities and applies the specified general
    transformation to the copy, moving the copy within the active part.
    
    @note
    The caller is responsible to free the outputEntityList by using ZwEntityHandleListFree().

    @param [in] inputCount number of entities to transform
    @param [in] inputEntityList list of geometry entity handle
    @param [in] matirxList list of transformation matrix.(each matrix in list can be different with each other)
    @param [out] outputCount number of new entities (NULL to ignore)
    @param [out] outputEntityList handle of new entities (NULL to ignore)

    @retval succeeds
    -        ZW_API_NO_ERROR
    @retval fail
    -        ZW_API_GENERAL_ERROR
    -        ZW_API_INVALID_INPUT
    -        ZW_API_ROOT_OBJ_ACT_FAIL
    -        ZW_API_WRONG_ROOT_ENV
    -        ZW_API_CMMD_INTI_ERROR
    -        ZW_API_INPUT_ERROR
    -        ZW_API_CMMD_EXEC_ERROR
    */
    ZW_API_C ezwErrors ZwFeatureCopyWithMultiMatrix(int inputCount, const szwEntityHandle *inputEntityList, const szwMatrix *matirxList, int *outputCount, szwEntityHandle **outputEntityList);

    //====================================================================================================================
    /** @name Feature Query */
    //====================================================================================================================
    /**
    @ingroup ZwFeatureGeneral

    Outputs a list of handle of features in the current active part.
    If there are no features, "*countFeature" is output as zero and "*featureList" as NULL.

    @note
    The caller is responsible to free the featureList by using ZwEntityHandleListFree().  
    This function will not get unplayed features.

    @param [out] countFeature  number of features in the specified part
    @param [out] featureList  list of feature handle in the specified part

    @retval succeeds
    -        ZW_API_NO_ERROR
    @retval fail
    -        ZW_API_GENERAL_ERROR
    -        ZW_API_INVALID_OUTPUT
    -        ZW_API_FILE_LOCATE_FAIL
    -        ZW_API_INPUT_TYPE_ERROR
    -        ZW_API_OBJ_DATA_GET_ERROR
    -        ZW_API_OUT_OF_RANGE
    */
    ZW_API_C ezwErrors ZwFeatureListGet(int *countFeature, szwEntityHandle **featureList);

    /**
    @ingroup ZwFeatureGeneral

    Outputs a list of handle of the entity that generated by the specified feature in the active file.  
    Right now, this function only support to get shape, face, curve, point, dimension and sketch from the feature.  
    If you want to get parent feature of entity, see ZwEntityParentFeatureGet().

    @note
    The caller is responsible to free the entityList by using ZwEntityHandleListFree().

    @param [in] featureHandle feature handle
    @param [in] entityType entity type
    @param [out] count number of entities
    @param [out] entityList list of the entity handle

    @retval succeeds
    -        ZW_API_NO_ERROR
    @retval fail
    -        ZW_API_GENERAL_ERROR
    -        ZW_API_INVALID_INPUT
    -        ZW_API_INVALID_OUTPUT
    -        ZW_API_OBJ_DATA_GET_ERROR
    -        ZW_API_MEMORY_ERROR
    -        ZW_API_OBJ_TYPE_ERROR

    */
    ZW_API_C ezwErrors ZwFeatureChildEntityListGet(szwEntityHandle featureHandle, ezwEntityType entityType, int *count, szwEntityHandle **entityList);
   
    /**
    @ingroup ZwFeatureGeneral

    Gets the child features of specified feature.
    The feature list (childList) is allocated by this function.

    @note
    The caller is responsible to free the childList by using ZwEntityHandleListFree().

    @param [in] featureHandle handle of feature in active part
    @param [out] countChild number of children
    @param [out] childList list of handles of feature's children

    @retval succeeds
    -        ZW_API_NO_ERROR
    @retval fail
    -        ZW_API_GENERAL_ERROR
    -        ZW_API_INVALID_INPUT
    -        ZW_API_INVALID_OUTPUT
    -        ZW_API_ROOT_OBJ_ACT_FAIL
    */
    ZW_API_C ezwErrors ZwChildFeatureListGet(szwEntityHandle featureHandle, int *countChild, szwEntityHandle **childList);

    //====================================================================================================================
    /** @name Basic Editing */
    //====================================================================================================================

    /**
    @ingroup ZwFeatureGeneral
    
    Initializes the parameters of the szwMoveData.
    
    @note
    Do not assign a value to variable "data" before calling this function.
    The ZwMemoryZero() is called inside the interface to empty everything.
    
    @param [out] data template command move data
    
    @retval succeeds
    -        ZW_API_NO_ERROR
    @retval fail
    -        ZW_API_GENERAL_ERROR
    -        ZW_API_INVALID_OUTPUT
    */
    ZW_API_C ezwErrors ZwFeatureMoveDataInit(szwMoveData *data);

    /**
    @ingroup ZwFeatureGeneral

    Adds the specified move to the active part and outputs the  
    handle of the corresponding history operation.  

    Pass in NULL for "move" if the output is not required.  
    Function Guide: Shape(Free Form,Wireframe)->Basic Editing->Move  

    @note
    The caller is responsible to free the handle by using ZwEntityHandleFree().
    Remember to free the memory allocated in data.

    @param [in] data Move data
    @param [out] moveHandle Move feature handle (NULL to ignore)

    @retval succeeds
    -        ZW_API_NO_ERROR
    @retval fail
    -        ZW_API_GENERAL_ERROR
    -        ZW_API_INVALID_INPUT
    -        ZW_API_ROOT_OBJ_ACT_FAIL
    -        ZW_API_WRONG_ROOT_ENV
    -        ZW_API_CMMD_INIT_ERROR
    -        ZW_API_INPUT_ERROR
    -        ZW_API_CMMD_EXEC_ERROR
    */
    ZW_API_C ezwErrors ZwFeatureMoveCreate(szwMoveData data, szwEntityHandle *moveHandle);

    /**
    @ingroup ZwFeatureGeneral
    
    Moves the specified geometry within the active part from one point "startPoint" to another "endPoint".
    It also changes the orientation of the part based on "startDirection" and "endDirection".
    If the directions are same, the orientation of the geometry is not changed -- it is simply translated.
    Function Guide: Shape(Free Form, Wireframe)->Basic Editing->Move
    
    @see ZwFeatureMoveCreateByTransform
    
    @param [in] count count of handles of geometry entity to move
    @param [in] handleList handles of geometry entity to move
    @param [in] startPoint start point
    @param [in] endPoint end point
    @param [in] startDirection start direction(NULL to ignore), used when you want to rotate geometry.
    @param [in] endDirection end direction(NULL to ignore), used when you want to rotate geometry.
    
    @retval succeeds
    -        ZW_API_NO_ERROR
    @retval fail
    -        ZW_API_GENERAL_ERROR
    -        ZW_API_INVALID_INPUT
    -        ZW_API_ROOT_OBJ_ACT_FAIL
    -        ZW_API_WRONG_ROOT_ENV
    -        ZW_API_CMMD_INIT_ERROR
    -        ZW_API_INPUT_ERROR
    -        ZW_API_CMMD_EXEC_ERROR
    */
    ZW_API_C ezwErrors ZwFeatureMoveCreateByPointToPoint(int count, const szwEntityHandle *handleList, szwPoint startPoint, szwPoint endPoint, const szwVector *startDirection, const szwVector *endDirection);

    /**
    @ingroup ZwFeatureGeneral

    Applies the specified general transformation to a geometry entity,
    moving the entity within the active part.

    If "matrix" includes scaling, the scale factors are ignored.
    Function Guide: Shape(Free Form, Wireframe)->Basic Editing->Move

    @see ZwFeatureMoveCreateByPointToPoint

    @param [in] count the count of handleList
    @param [in] handleList handles of geometry entity to move
    @param [in] matrix transformation matrix

    @retval succeeds
    -        ZW_API_NO_ERROR
    @retval fail
    -        ZW_API_GENERAL_ERROR
    -        ZW_API_INVALID_INPUT
    -        ZW_API_ROOT_OBJ_ACT_FAIL
    -        ZW_API_WRONG_ROOT_ENV
    -        ZW_API_CMMD_INIT_ERROR
    -        ZW_API_INPUT_ERROR
    -        ZW_API_CMMD_EXEC_ERROR
    */
    ZW_API_C ezwErrors ZwFeatureMoveCreateByTransform(int count, const szwEntityHandle *handleList, szwMatrix matrix);

    //====================================================================================================================
    /** @name Pattern */
    //====================================================================================================================

    /**
    @ingroup ZwFeatureGeneral

    Refreshes the parameter table data of pattern feature.  

    @note
    Call this function before using cvxPtnParameterTableVariableSet().

    @param [in] patternFeature handle of pattern feature

    @retval succeeds
    -        ZW_API_NO_ERROR
    @retval fail
    -        ZW_API_ROOT_OBJ_ACT_FAIL
    -        ZW_API_WRONG_ROOT_ENV
    -        ZW_API_GENERAL_ERROR
    -        ZW_API_INPUT_ERROR
    -        ZW_API_OBJ_DATA_GET_ERROR
    -        ZW_API_INVALID_OBJ
    -        ZW_API_MEMORY_ERROR
    -        ZW_API_OUT_OF_RANGE
    */
    ZW_API_C ezwErrors ZwFeaturePatternParameterTableRefresh(szwEntityHandle patternFeature);


   /*
   *********************************************************************
   **  END HEADER FILE
   *********************************************************************
   */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* ZW_API_FEATURE_GENERAL_H */
